OTP defines systems in terms of hierarchies of applications.

Application = one or more processes

These processes follow OTP behaviours (GenServer, GenSupervisor etc.).

Each behariour implementation runs in it's own process.


GenServer.start_link is similar to Process.spawn_link

!!USEFUL!!
GenServer.start_link(module, init_arg, [debug: [:trace]])

or dynamically:
iex> :sys.trace pid, true

iex(31)> GenServer.call(pid, :next_number)
*DBG* <0.244.0> got call next_number from <0.184.0>
*DBG* <0.244.0> sent 12 to <0.184.0>, new state 13
!!USEFUL!!


!!USEFUL!!
Print current state of process

:sys.get_status pid
!!USEFUL!!


GenServer

init(start_arguments)

:: {:ok, state}
:: {:stop, reason}
:: {:ok, state, timeout} - sends process :timeout message if no
message is received in [timeout] ms.

handle_call(request, _from, state)
:: {:reply, result, new_state [, :hibernate | timeout ]}
:: {:stop, reason, result, new_state}

handle_cast(request, state)
:: {:noreply, new_state [, :hibernate | timeout ]}
:: {:stop, reason, new_state}

handle_info handles non "call" and "cast" messages.
Examples: linked process termination, timeouts.

handle_info(request, state)
:: {:ok, state [, :hibernate | timeout ]}
:: {:stop, reason, new_state}


Naming a process

II Local naming:
Using [name: NAME] in GenServer.start_link options


III Worker restart option
use GenServer, restart: :transient

Supervisor :strategy is triggered when worker is restarted.
This depends on :restart option in child_spec/1 of worker.
child_spec/1 calls Supervisor.child_spec/1 internally.
Besides this, child_spec/0 specifies which function to start worker with (start_link is default)

restart:

:permanent - all reason (default in child_spec/1)
:transient - any reason, except :normal
:temporary - never restarted 


Application Architecture questions:

What is the environment and what are its constraints?
What are the obvious focal points?
What are the runtime characteristics?
What do I protect from errors?
How do I get this thing running?

IIII Duper

DynamicSupervisor = obsolete :simple_one_for_one strategy

IIIII Let inIT be!
When we'are initializing the server, we should not interact with 
anything that uses that server. 
Use this instead: Process.send_after(self(), :kickoff, 0)


IIIIIII Enforcing order
A - Dynamic number of workers (DynamicSupervisor)
Add workers during init + timeout

B - Static number of workers
Use order of children in Supervisor children list


IIIIIIII Additional work after responding to handle_call
Process.send_after(self(), :do_one_more, 0)

IIIIIIIII
Use System.halt(0) to stop the system


To run:
- iex -S mix
- mix run --no-halt

Measure time:
time mix run --no-halt


IIIIIIIIIIII
Agents and Tasks are better if wrapped in modules.
This would allow switching to GenServer if needed