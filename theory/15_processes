Elixir uses the actor model of concurrency. 
An actor is an independent process
that shares nothing with any other process. 

You can spawn new processes, send
them messages, and receive messages back. 

And thatâ€™s it

SPAWN-SEND-RECEIVE


Linking (spawn_link):
- works both directions
- parent exit is prevented by Process.flag(:trap_exit, true), 
  results in {:EXIT, pid, reason} message

Monitoring (spawn_monitor, Process.monitor)
- works in one direction
- parent exit results in {:DOWN, monitor_ref, pid, reason} 

-- ! --
Process.monitor as opposed to spawn_monitor is used for existing processes.
It's not atomic though, may cause race condition
-- ! --